; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define MyAppName GetStringFileInfo('Bin\x86\Debug\Bebidas.exe', 'ProductName')
#define MyAppVersion GetFileVersion('Bin\x86\Debug\Bebidas.exe')
[Files]
Source: bin\x86\Debug\VisuaD.Core.exe; DestDir: {app}
Source: bin\x86\Debug\Bebidas.exe; DestDir: {app}
Source: bin\x86\Debug\Bebidas.exe.config; DestDir: {app}
Source: bin\x86\Debug\Bebidas.pdb; DestDir: {app}
Source: bin\x86\Debug\Interop.SAPbobsCOM.dll; DestDir: {app}
Source: bin\x86\Debug\Interop.SAPbouiCOM.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.SBOObjectMg1.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.uEncrypt.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.uEncrypt.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.untLog.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.untLog.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.vkBaseForm.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.vkBaseForm.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.vkFormInterface.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.vkFormInterface.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.Core.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.Core.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.GlobalVid.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.GlobalVid.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.Main.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.Main.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.MainObjBase.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.MainObjBase.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.Matrix_Helper.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.Matrix_Helper.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.MultiFunctions.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.MultiFunctions.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.SBOCrystalPreview.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.SBOCrystalPreview.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.SBOFunctions.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.SBOFunctions.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.SBOGeneralService.dll; DestDir: {app}
Source: bin\x86\Debug\VisualD.SBOGeneralService.pdb; DestDir: {app}
Source: bin\x86\Debug\VisualD.SBOObjectMg1.dll; DestDir: {app}
Source: bin\x86\Debug\AddOnInstallAPI.dll; DestDir: {app}
Source: bin\x86\Debug\Docs\EDBEBIDAS.xls; DestDir: {app}\Docs\
Source: bin\x86\Debug\Docs\EDBEBIDAS2.xls; DestDir: {app}\Docs\
Source: bin\x86\Debug\Forms\VID_AsigLotes.srf; DestDir: {app}\Forms\
[Dirs]
Name: {app}\Docs
Name: {app}\Forms

[Setup]
UsePreviousLanguage=no
AppName={#MyAppName}
VersionInfoVersion={#MyAppVersion}
AppPublisher=Visual Developer
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisherURL=http://www.visuald.cl
AppSupportURL=http://www.visuald.cl
AppUpdatesURL=http://www.visuald.cl
DefaultDirName={code:GetDefaultAddOnDir}
;OutputBaseFileName={code:GetSetupName}
OutputBaseFileName=Setup
DisableDirPage=true
DisableProgramGroupPage =yes
Compression=lzma
SolidCompression=true
UsePreviousAppDir=false
AppendDefaultDirName=true
PrivilegesRequired=admin
WindowVisible=false
WizardSmallImageFile=compiler:WizModernSmallImage-IS.bmp
WizardImageFile=compiler:WizModernImage-IS.bmp
AppContact=soporte@visuald.cl
SetupLogging=true
[Run]
Filename: {app}\VisuaD.Core.exe
[Messages]
BeveledLabel=Visual Developer - www.visuald.cl
[Registry]
Root: HKLM; Subkey: SOFTWARE\VID\Addons\{code:GetAddOnName}; ValueType: string; ValueName: InstallDir; ValueData: {code:GetDefaultAddOnDir}; Flags: uninsdeletevalue
[Languages]
Name: spanish; MessagesFile: compiler:Languages\Spanish.isl
[UninstallDelete]
Type: files; Name: {app}\{code:GetSetupName}.EXE
Name: {app}\*.dll; Type: files; Languages: 
[Code]
type
   TSHFileOpStruct = record
     Wnd : HWND;
     wFunc : UINT;
     pFrom : PChar;
     pTo : PChar;
     fFlags : Word;
     fAnyOperationsAborted 	: BOOL;
     hNameMappings : HWND;
     lpszProgressTitle: PChar;
   end;

const
   { $EXTERNALSYM FO_COPY }
   FO_COPY = $0002;
   { $EXTERNALSYM FOF_SILENT }
   FOF_SILENT = $0004;
   { $EXTERNALSYM FOF_NOCONFIRMATION }
   FOF_NOCONFIRMATION         = $0010;

var
  CurrentLocation : string;
  AddOnDir : string;
  FinishedInstall : Boolean;
  Params : string;
  i : integer;

//Copy
function SHFileOperation(const lpFileOp: TSHFileOpStruct):Integer; external 'SHFileOperation@shell32.dll stdcall';


//SAP B1
function EndInstallEx(Dir:String;Ok:Boolean): integer; external 'EndInstallEx@files:AddOnInstallAPI.dll stdcall';
function EndUninstall(path: string; succeed: boolean): integer; external 'EndUninstall@files:AddOnInstallAPI.dll stdcall';
function SetAddOnFolder(srcPath : string): integer; external 'SetAddOnFolder@files:AddOnInstallAPI.dll stdcall';
function RestartNeeded :integer; external 'RestartNeeded@files:AddOnInstallAPI.dll stdcall delayload ';


Function ExistStrInParam(StrInParam:string) : boolean;
var
  j : integer;
begin
  result := false;
  for j:=0 to ParamCount do
  if UpperCase(ParamStr(j))=UpperCase(StrInParam) then
  begin
    result:=true;
    break;
  end;
end;

function GetAddOnName(dummy: String): string;
begin
   result := 'Bebidas';
end;

function GetSetupName(dummy: String): string;
begin
   result := 'Setup';
end;

function PreparePaths() : Boolean;
var
  position : integer;
  aux : string;
begin
   if pos('|', paramstr(2)) <> 0 then //la ruta puede venir en el parametro 2 o 4
   begin
      aux := paramstr(2);
      position := Pos('|', aux);
      AddOnDir := Copy(aux,1, position - 1);
      Result := True;
   end
   else
   if pos('|', paramstr(4)) <> 0 then //la ruta puede venir en el parametro 2 o 4
   begin
      aux := paramstr(4);
      position := Pos('|', aux);
      AddOnDir := Copy(aux,1, position - 1);
      Result := True;
   end
   else
   if not ExistStrInParam('/U') then
   begin
     //result:=True;
     MsgBox('El Instalador debe ser ejecutado desde SAP Business One.', mbInformation, MB_OK);
     EndInstallEx('',false);//Avisa a Sap B1 que se aborto la instalacion
     Result := False;
   end;
end;

function GetDefaultAddOnDir(Param : string): string;
begin
   result := AddOnDir;
end;


function InitializeSetup(): Boolean;
var
 ResultCode : Integer;
 UninstallerPath : String;
begin
   Params:='';
   for i:=0 to ParamCount do
   Params:=Params+' Param'+inttoStr(i)+' = '+paramstr(i)+#13;
   //MsgBox(Params, mbInformation, MB_OK);

   if ExistStrInParam('/U') then
   begin
    if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\VID\Addons\'+GetAddOnName(''),'InstallDir', CurrentLocation) then
    UninstallerPath:=CurrentLocation + '\unins000.exe';
    //MsgBox('UninstallerPath '+UninstallerPath, mbInformation, MB_OK);
    Exec(UninstallerPath, '/SILENT', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
    EndUninstall('', true);
    result:=False;
   end
   else
   begin
     result := PreparePaths;
   end;
end;

procedure DeinitializeSetup();
begin

end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
   Result := True;
   case CurPageID of
       wpSelectDir :
       begin
           AddOnDir := ExpandConstant('{app}');
       end;
       wpFinished :
       begin
          if FinishedInstall then
          begin
             SetAddOnFolder(AddOnDir);
             EndInstallEx('',True);
          end;
       end;
   end;
end;

Function ExtractFileNameParam(StrParam:string) : string;
var
  j : integer;
begin
 result := StrParam;
 j := 1;
 repeat
   result := Copy(StrParam, j, Length(StrParam));
   j := j + 1;
 until FileExists(result) or (j >= Length(StrParam));
end;

procedure CopyFile(FromFileName, ToFileName: string);
var
  ShellInfo : TSHFileOpStruct;
  Files : String;
begin
  Files := FromFileName+#0+#0;
  ShellInfo.wFunc := FO_COPY;
  ShellInfo.pFrom := PChar(Files);
  ShellInfo.pTo := PChar(ToFileName);
  ShellInfo.fFlags := FOF_NOCONFIRMATION or FOF_SILENT;
  SHFileOperation(shellinfo);
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
   SetupFile : string;
begin
   if CurStep = ssPostInstall then
   begin
    SetupFile:=ExtractFileNameParam(ParamStr(1));
    DeleteFile(AddOnDir+'\'+GetSetupName('')+'.exe');
    CopyFile(SetupFile,AddOnDir+'\'+GetSetupName('')+'.exe');
    FinishedInstall := True;
   end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
{ no se usa por el momento debido a que el instalador llama al unist000.exe
	case CurUninstallStep of
		ssDone : EndUninstall('',true);
	end;
}
end;
